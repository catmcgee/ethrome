{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":12661607224825719081,"abi":{"parameters":[],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/+2ay26bQBSGIRf3GPD97pU33YMdg7vza3TZpF10U1VVn62PVzVDGDGeHDczyuFoBjFSxMTY83/nA9kYnzCoR1xt76ttGFwf52qbvnME17KIAjLGYrI2FbNvUzGHNhXzwFJMyFJM8dieYrKnU3uKOWTH9hTTnWauFsNxmomF7wLDcVNt/1RbUPbtqKBOadZTFg8xBrgEENmxwicf//D816semoi14HIt8e9tUOecKfifpYKSuyNbd38UNeoHS/ezU+Y9pc57cp6m6kxTqI6dZKdZt3gMg9fn7J3maqg8R2WABvyFSq5cWz1mejadi/1eZPcNXPQRnj6ziz6STeciL8+LyMBFhPBEzC4iJJvQxSeRHRu4iBGemNlFjGQTuvgmshMDFwnCkzC7SJBsQhcPIntg4GKA8AyYXcg8W2ZwgBm0OU324UtY1fqWiyHCM2R2IfNsmcEBZtDmNNnFUWSPDFyMEJ4RswuZZ8scO8AM2pwmuziI7LGBizHCM2Z2IfNsmSMHmEGb02TnhcieGLiYIDwTZhcyz5Y5doAZtDlNdl6+f04NXEwRnimzC5lny5x4yBx5yBw7wAzanCa7KK/zZwYuZgjPjNmFzLNlnnjIPPaQ2QXPoM1psovy/tncwMUc4Zkzu5B5tszgADNoc5rs/ZPIXhi4WCA8C2YXMs+WGRxgBm1Ok12U1+NLAxdLhGfJ7ELm2TJHHjInHjJPHWAGbU6TnZ9E9srAxQrhWTG7kHm2zOAh88ABZtDmNNmH8l7X2sDFGuFZM7tYI9mELsrrxI2Biw3Cs2F2sUGyCT+zv4rsrYGLLcKzZXaxVbLlYyFddio+22VPxs9f33/8DrShNnrcKvMbBUY+56Oyv4e8PlQKDIPLphHQXi/2iR+4Pyv7A+X154BAwBtNPteaeaQw/5t5srRr5nnP6Jp56tE189Sja+ZRXHTNPLWLrpmndtE18zAxd808XTPP65HnIrvtzTyRA8zNNPO8NBP41szTUGNM+UNK2xtjEg+ZwQHmZpp5Xm4k+dbM48WNJPVN7X83kv4G+I2ksfZc8eXqH5T3rJlGPwAA","debug_symbols":"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","file_map":{"30":{"source":"mod hash;\nmod aes128;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod embedded_curve_ops;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod convert;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\nmod bigint;\nmod runtime;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(verification_key: [Field], proof: [Field], public_inputs: [Field], key_hash: Field) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\n","path":"std/lib.nr"},"47":{"source":"use dep::std;\n\nfn main() {\n    // loop over a range\n    for i in 0..5 {\n        std::println(i);\n    }\n\n    // over a list, by index\n    let foo = [123, 456, 789];\n    for i in 0..foo.len() {\n        let elem = foo[i];\n        std::println(elem);\n    }\n\n    // or using for-each style\n    for elem in foo {\n        std::println(elem);\n    }\n}","path":"/Users/catmcgee/Documents/Work/noir-vsummit/intermediate/src/main.nr"}},"names":["main"]}