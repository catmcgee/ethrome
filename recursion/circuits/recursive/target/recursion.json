{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":14081661684729575307,"abi":{"parameters":[{"name":"verification_key","type":{"kind":"array","length":114,"type":{"kind":"field"}},"visibility":"private"},{"name":"proof","type":{"kind":"array","length":93,"type":{"kind":"field"}},"visibility":"private"},{"name":"public_inputs","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"nd3NahxHFIbhe5m1Fn2qz6kf30oIQbblIDCyseRAML73jJNokVg2PLVTS/3N5kEw83Yhfbm8vXv9+fff7h/efXi8vPrly+X9hze3T/cfHq5XXy7n3996/Hj78O3q8en209PlVWTeXO4e3l6/mv3rzeXd/fu7y6scX2++v7Ud6/ne9u2Of29u6+uvN5d86dVbPC9a/ufVr4PSQdfB0MHUwdJBHLwIXjRenLxg7mDvYPBg8WDyYPPG5o3NG5s3Nm9s3ti8sXlj88bmjc1PNj/Z/GTzk81PNj/Z/GTzk81PNj/ZPNk82TzZPNk82TzZPNk82TzZPNm82LzYvNi82Lz87RubF5sXmxebF5t3Nu9s3tm8s3ln8+7v2dm8s3ln887mg80Hmw82H2w+2Hyw+fAPamw+2Hyw+WTzyeaTzSebTzafbD7ZfPqnczafbL7YfLH5YvPF5ovNF5svNl9svjzJbDQZjzKHV5nDs8zhXebwMHN4mTk8zRzeZg6PM4fr7yQ519+IchtVbiPLbXS5jTC3UeY20py3ufA4F22jyLq+97nwQBde6MITXXijC4904ZUuPNOFd7o4N4K863uqC2914bEuvNaF57rwXhce7MKLXXiyi9x4HuP6Xu3Cs114twsPd+HlLjzdhbe78HgXXu/C8114vwsPeOEFLzzhhTe88IgXXvHCM154xwsPedE3nsa6vre88JgXXvPCc154zwsPeuFFLzzphTe9GBsP413fs1541wsPe+FlLzzthbe98LgXXvfC817MjbMYru+FLzzxhTe+8MgXXvnCM1945wsPfeGlL9bGUZyNszh+GMdbX/PW17z1NW99zVtf89bXvPU1b33NW1+LjaNYru+tr3nra976mre+5q2veetr3vraxjm8jYN4OyfxXH/jLN7GYbyN03gbx/E2zuNtHMjz1te89TVvfe3cOIj5sn6N58k4v5ukT8on3SfDJ9Mniyc/aH0/nYRPmk9cP10/XT9dP10/XT9dv1y/XL9cv1y/XL9cv1y/XL9cv1y/u353/e763fW763fX767fXb+7fnf94frD9YfrD9cfrj9cf7j+cP3h+sP1p+tP15+uP11/uv50/en60/Wn60/XX66/XH+5/nL95frL9ZfrL9dfrr9Y/zwOn4RPmk9On6RPyifdJ8Mn0yeuH64frh+uH64frh+uH64frh+uH67fXL+5fnP95vrN9ZvrN9f/Qeubz39S4Pqb/t1k+uRF/esTtufJmf+fvNz6fj4JnzSfnD5Jn5RPuk+GT6ZPXD9dP10/XT9dP10/XT9dP10/XT9dv1y/XL9cv1y/XL9cv1y/XL9cv1y/u353/e763fW763fX767fXb+7fnf94frD9YfrD9cfrj9cf7j+cP3h+sP1p+tP15+uP11/uv50/en60/Wn60/XX66/XH+5/nL95frL9ZfrL9dfrr9YP4/DJ+GT5pPTJ+mT8kn3yfDJ9Inrh+uH64frh+uH64frh+uH64frh+s312+u31y/uX5z/eb6zfWb6zfX99aX3vrSW19660tvfemtL731pbe+9NaX3vrSW19660tvfemtL731pbe+9NaX3vrSW19660tvfemtL731pbe+9NaX3vrSW19660tvfemtL731pbe+9NaX3vrSW19660tvfemtL731pbe+9NaX3vrSW19660tvfemtL731pbe+9NaX3vrSW19660tvfemtL731pbe+9NaX3vrSW19660tvfemtL731pbe+9NaX3vrSW19660tvfemtL731lbe+8tZX3vrKW1956ytvfeWtr7z1lbe+8tZX3vrKW1956ytvfeWtr7z1lbe+8tZX3vrKW1956ytvfeWtr7z1lbe+8tZX3vrKW1956ytvfeWtr7z1lbe+8tZX3vrKW1956yttfdeLP24/3d++fn/3eB18+9nnhzfP/3bqevn058d/fnK99y8=","file_map":{"29":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::embedded_curve_ops::EmbeddedCurvePoint;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<N>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: false }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"47":{"source":"use dep::std;\n\nfn main(\n    verification_key : [Field; 114], \n    proof : [Field; 93], \n    public_inputs : [Field; 1], \n) {\n    let key_hash = std::hash::pedersen_hash(verification_key);\n    std::verify_proof(\n        verification_key.as_slice(), \n        proof.as_slice(), \n        public_inputs.as_slice(), \n        key_hash,\n    );\n}","path":"/Users/catmcgee/Documents/Work/noir-vsummit/recursion/recursive/src/main.nr"}},"names":["main"]}